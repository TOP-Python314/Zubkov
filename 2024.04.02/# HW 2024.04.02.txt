ШАБЛОНЫ ПРОЕКТИРОВАНИЯ, ЧАСТЬ 2

  ==========  1  ==========

В файле # ref 1.py есть класс TestCase c несколькими методами, вызов которых вы хотите контролировать.

Реализуйте класс по шаблону Команда, обеспечивающий следующую функциональность:
  — хранение истории операций
  — отмена последних операций
  — повторного выполнения отменённых операций
  — перехвата потенциальных исключений

Класс TestCase не должен быть изменён.



  ==========  2  ==========  

В файле chess.py находится реализация ООП модели основных сущностей для игры шахматы. 
Диаграмма классов модели в файле chess.png

Внимательно изучите код и взаимиодействие объектов между собой.

Реализуйте класс-хранитель Turn.

    В нём должна сохраняться информация:
      — о фигуре, сделавшей ход
      — о клетке, с которой был сделан ход
      — о клетке, на которую был сделан ход.

Реализуйте класс Game, который будет совмещать функции инициатора и опекуна.

    С помощью этого класса у вас должны быть возможности: 
      — управлять экземпляром игровой доски
      — совершать ходы с клетки на клетку
      — хранить историю ходов
      — выводить все записанные ходы, нумерованные с единицы
      — возвращаться к началу заданного хода.

Классы Turn и Game должны быть согласованы с существующей объектной моделью.

Можно использовать импорт из файла chess.py



  =========================

Каждый класс должен быть документирован. 
Каждый метод кроме встроенных (специальных) должен быть документирован.

Каждое поле класса должно быть аннотировано. 
Атрибуты экземпляра аннотируются в том случае, если типы их значений не совпадают с соответствующими переданными в конструктор аргументами, или если атрибуты создаются безотносительно переданных в конструктор аргументов.
Каждый параметр (кроме self и cls) всех методов должен быть аннотирован. 
Каждое возвращаемое значение методов кроме встроенных (специальных) должно быть аннотировано.

Во всех случаях аннотация опускается, если с аннотируемым идентификатором может быть связан объект произвольного типа.

Помимо перечисленных в каждой задаче обязательных атрибутов классов и экземпляров возможно добавление собственных вспомогательных атрибутов и методов.

Работа классов тестируется в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки результатов тестов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.